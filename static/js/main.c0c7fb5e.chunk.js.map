{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Home.jsx","components/Contact.jsx","components/CartProject.jsx","components/BodyContent.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","exact","to","Footer","Home","Contact","CartProject","BodyContent","path","component","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAgBeA,EAdA,SAACC,GAEZ,OAAQ,yBAAKC,UAAU,UACnB,wBAAIA,UAAU,WACV,4BAAI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,UACJ,4BAAI,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,gBAAlB,YACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,YAAZ,aAER,yBAAKF,UAAU,iBACX,0BAAMA,UAAU,kBCNbG,EAJA,WACX,OAAO,yBAAKH,UAAU,UAAS,wCCMpBI,EANF,SAACL,GACV,OAAO,yBAAKC,UAAU,QAAf,SCKIK,EANC,SAACN,GACb,OAAO,yBAAKC,UAAU,WAAf,YCMIM,EAPK,SAACP,GACjB,OAAO,yBAAKC,UAAU,oBACf,yBAAKA,UAAU,eAAf,gBACA,yBAAKA,UAAU,QAAf,U,OCSIO,EARK,WAChB,OAAQ,yBAAKP,UAAU,eACnB,kBAAC,IAAD,CAAOC,OAAK,EAACO,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACO,KAAK,eAAeC,UAAWH,IAC5C,kBAAC,IAAD,CAAOE,KAAK,WAAWC,UAAWJ,MCW3BK,G,uLAZX,OACF,kBAAC,IAAD,KACC,yBAAKV,UAAU,gBACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GAPcW,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c0c7fb5e.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from \"react-router-dom\";\nconst Header = (props) => {\n\n    return (<div className=\"header\">\n        <ul className=\"navMenu\">\n            <li><NavLink exact to=\"/\">Homes</NavLink></li>\n            <li><NavLink exact to=\"/cartProject\">Project</NavLink></li>\n            <li><NavLink to=\"/contact\">Contact</NavLink></li>\n        </ul>\n        <div className=\"statusSection\">\n            <span className=\"cartStatus\"></span>\n        </div>\n    </div>)\n}\n\nexport default Header;","import React from 'react';\nconst Footer = () => {\n    return(<div className=\"footer\"><h4>Footer</h4></div>)\n}\n\nexport default Footer;","import React from 'react';\n\nconst Home = (props) => {\n    return(<div className=\"home\">\n           Home\n        </div>)\n}\n\nexport default Home;\n","import React from 'react';\n\nconst Contact = (props) => {\n    return(<div className=\"contact\">\n           Contact\n        </div>)\n}\n\nexport default Contact;","import React from 'react';\n\nconst CartProject = (props) => {\n    return(<div className=\"projectContainer\">\n           <div className=\"productList\">PRODUCT LIST</div>\n           <div className=\"cart\">CART</div>\n        </div>)\n}\n\nexport default CartProject;\n","import React from 'react';\n\nimport Home from './Home';\nimport Contact from './Contact';\nimport CartProject from './CartProject';\nimport { Route } from \"react-router-dom\";\nconst BodyContent = () => {\n    return (<div className=\"bodyContent\">\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/cartProject\" component={CartProject} />\n        <Route path=\"/contact\" component={Contact} />\n    </div>)\n}\n\nexport default BodyContent;","import React from 'react';\nimport { HashRouter } from \"react-router-dom\";\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport BodyContent from './components/BodyContent';\n\nimport './css/style.css';\nclass App extends React.Component {\n  render() {\n    return (\n\t\t<HashRouter>\n\t\t\t<div className=\"appContainer\">\n\t\t\t\t<Header />\n\t\t\t\t<BodyContent />\n\t\t\t\t<Footer/>\n\t\t\t</div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}